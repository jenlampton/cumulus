<?php
/**
 * @file
 * Provides a Flash-based 3D tag cloud.
 * Based on WP-Cumulus for WordPress, by Roy Tanck.
 */

/**
 * Implements hook_menu().
 */
function cumulus_menu() {
  $items['admin/config/cumulus'] = array(
    'title' => 'Cumulus',
    'description' => 'Cumulus settings',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cumulus_admin_settings'),
    'access arguments' => array('administer cumulus'),
    'type' => MENU_NORMAL_ITEM,
    'file' => 'cumulus.admin.inc',
  );

  $items['admin/structure/block/add-cumulus-block'] = array(
    'title' => 'Add cumulus block',
    'description' => 'Add a new cumulus block.',
    'access arguments' => array('administer blocks'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cumulus_add_block_form'),
    'type' => MENU_LOCAL_ACTION,
    'file' => 'cumulus.admin.inc',
  );
  $items['admin/structure/block/delete-cumulus-block'] = array(
    'title' => 'Delete cumulus block',
    'access arguments' => array('administer blocks'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('cumulus_delete'),
    'type' => MENU_CALLBACK,
    'file' => 'cumulus.admin.inc',
  );
  return $items;
}

/**
 * Returns the configuration for the requested block delta.
 *
 * @param $delta
 *   string The delta that uniquely identifies the block in the block system. If
 *   not specified, the default configuration will be returned.
 * @return
 *   array An associated array of configuration options.
 */
function cumulus_get_config($delta = NULL) {
  $config = cumulus_default_config();
  $config['delta'] = $delta;

  // Get the block configuration options.
  if ($delta) {
    static $blocks;
    if (!isset($blocks)) {
      $blocks = module_invoke_all('cumulus_blocks');
    }
    if (!empty($blocks[$delta])) {
      // Merge the default values.
      $config = $blocks[$delta] + $config;
      // Set the delta.
      $config['delta'] = $delta;
      // Flag the block as exported.
      $config['exported_to_code'] = TRUE;
    }

    foreach(array_keys(cumulus_default_config()) as $paramter) {
      $config[$paramter] = cumulus_variable_get($paramter, $delta, $config[$paramter]);
    }
  }

  return $config;
}

function cumulus_default_config() {
  return array(
    'info' => variable_get('cumulus_info', NULL),
    'vid' => variable_get('cumulus_vid', 1),
    'tagadelic_step' => variable_get('cumulus_tagadelic_step', 6),
    'tagadelic_limit' => variable_get('cumulus_tagadelic_limit', 24),
    'flash_width' => variable_get('cumulus_flash_width', 200),
    'flash_height' => variable_get('cumulus_flash_height', 150),
    'flash_background' => variable_get('cumulus_flash_background', 'ffffff'),
    'flash_transparency' => variable_get('cumulus_flash_transparency', 'false'),
    'flash_color' => variable_get('cumulus_flash_color', 'ff0000'),
    'flash_color2' => variable_get('cumulus_flash_color2', '000000'),
    'flash_hicolor' => variable_get('cumulus_flash_hicolor', '666666'),
    'flash_speed' => variable_get('cumulus_flash_speed', 100),
    'flash_distribute' => variable_get('cumulus_flash_distribute', 'true'),
    'flash_font_size' => variable_get('cumulus_flash_font_size', 10),
    'flash_font_size_interval' => variable_get('cumulus_flash_font_size_interval', 2),
  );
}

/**
 * Implements hook_block_info().
 */
function cumulus_block_info() {
  $blocks = array();
  $deltas = variable_get('cumulus_ids', array());
  foreach (array_keys(module_invoke_all('cumulus_blocks')) as $delta) {
    $deltas[] = $delta;
  }
  foreach ($deltas AS $delta) {
    $config = cumulus_get_config($delta);
    $blocks[$delta]['info'] = check_plain($config['info']);
    $blocks[$delta]['cache'] = DRUPAL_NO_CACHE;
  }
  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function cumulus_block_configure($delta = '') {
  // Create a pseudo form state.
  $form_state = array('values' => cumulus_get_config($delta));
  return cumulus_configure_form(array(), $form_state);
}

/**
 * Implements hook_form_block_admin_display_form_alter().
 *
 * Alters the block admin form to add delete links next to cumulus blocks.
 */
function cumulus_form_block_admin_display_form_alter(&$form, $form_state) {
  $blocks = module_invoke_all('cumulus_blocks');
  foreach (variable_get('cumulus_ids', array()) AS $delta) {
    if (empty($blocks[$delta])) {
      $form['blocks']['cumulus_' . $delta]['delete'] = array('#type' => 'link', '#title' => t('delete'), '#href' => 'admin/structure/block/delete-cumulus-block/' . $delta);
    }
  }
}

/**
 * Implements hook_block_view().
 */
function cumulus_block_view($delta) {
  $config = cumulus_get_config($delta);
  $vocs = $config['vid'];
  if (is_numeric($vocs)) {
    $vocs = array($vocs);
  }
  elseif (preg_match('/^([0-9]+,){1,5}[0-9]+$/', $vocs)) {
    $vocs = explode(',', $vocs);
  }
  else {
    $vocs = array(1);
  }
  $tags = tagadelic_get_weighted_tags($vocs, $config['tagadelic_step'], $config['tagadelic_limit']);
  $tags = tagadelic_sort_tags($tags);
  $tags_formatted_flash = theme('cumulus_weighted', array('terms' => $tags, 'config' => $config));
  $tags_formatted_alt = theme('tagadelic_weighted', array('terms' => $tags));

  $js = drupal_get_path('module', 'cumulus') . '/js/cumulus.js';
  drupal_add_js($js, array('preprocess' => FALSE));

  // Flash params
  $param = array(
    'path_to_flash' => base_path() . drupal_get_path('module', 'cumulus') . '/cumulus.swf',
    'width' => $config['flash_width'],
    'height' => $config['flash_height'],
    'background' => $config['flash_background'],
    'color' => '0x' . $config['flash_color'],
    'color2' => '0x' . $config['flash_color2'],
    'hicolor' => '0x' . $config['flash_hicolor'],
    'speed' => $config['flash_speed'],
    'distribute' => $config['flash_distribute'],
    'transparency' => $config['flash_transparency'],
  );
  if ($config['flash_transparency'] == 'true') {
    $param['transparency'] = 'widget_so.addParam("wmode", "transparent");';
  }

  // link to view with additional tags
  $links['more'] = l(t('more tags'), 'tagadelic/chunk/' . $config['vid']);
  // output content
  $blocks['subject'] = t('Cumulus Tag Cloud');
  // param with value 9 indicates required version of flash player - see http://blog.deconcept.com/swfobject/
  $blocks['content'] = <<<EOT
        <div id="tags">
        {$tags_formatted_alt}
        <script type="text/javascript">
          var rnumber = Math.floor(Math.random()*9999999);
          var widget_so = new SWFObject("{$param['path_to_flash']}?r="+rnumber, "cumulusflash", "{$param['width']}", "{$param['height']}", "9", "{$param['background']}");
          {$param['transparency']}
          widget_so.addParam("allowScriptAccess", "always");
          widget_so.addVariable("tcolor", "{$param['color']}");
          widget_so.addVariable("tcolor2", "{$param['color2']}");
          widget_so.addVariable("hicolor", "{$param['hicolor']}");
          widget_so.addVariable("tspeed", "{$param['speed']}");
          widget_so.addVariable("distr", "{$param['distribute']}");
          widget_so.addVariable("mode", "tags");
          widget_so.addVariable("tagcloud", "{$tags_formatted_flash}");
          widget_so.write("tags");
        </script>
        </div>
        <div class="more-link">{$links['more']}</div>
EOT;
  return $blocks;
}

/**
 * Implements hook_theme().
 */
function cumulus_theme() {
  return array(
    'cumulus_weighted' => array(
      'variables' => array('terms' => NULL, 'config' => cumulus_default_config()),
    ),
  );
}

/**
 * Themeing function.
 */
function theme_cumulus_weighted($variables) {
  $terms = $variables['terms'];
  $config = $variables['config'];
  $output = '<tags>';
  foreach ($terms as $term) {
    // assign font size
    $font_size = (intval($term->weight) * $config['flash_font_size_interval']) + ($config['flash_font_size'] - $config['flash_font_size_interval']);
    $uri = taxonomy_term_uri($term);
    $output .= l($term->name, $uri['path'], array('absolute' => TRUE, 'attributes' => array('style' => '"font-size: ' . $font_size . 'px;"'))) . " \n";
  }
  $output .= '</tags>';
  $output = urlencode($output);

  return $output;
}

/**
 * Clear the cache of all Cumulus (in effect, Tagadelic) data.
 */
function cumulus_clear_cache() {
  $cid = "tagadelic";
  $table = "cache";
  $wildcard = TRUE;
  cache_clear_all($cid, $table, $wildcard);
  drupal_set_message(t('The module\'s cache has been cleared'), 'status');
}

/**
 * Implements hook_permission().
 */
function cumulus_permission() {
  return array(
    'administer cumulus' => array(
      'title' => t('administer cumulus'),
      'description' => t('TODO Add a description for \'administer cumulus\''),
    ),
  );
}

/**
 * Get single variable
 */
function cumulus_variable_get($name, $delta, $default = NULL) {
  return variable_get('cumulus_' . $delta . '_' . $name, $default);
}

/**
 * Set single variable
 */
function cumulus_variable_set($name, $delta, $default = NULL) {
  return variable_set('cumulus_' . $delta . '_' . $name, $default);
}

/**
 * Delete single variable
 */
function cumulus_variable_del($name, $delta) {
  return variable_del('cumulus_' . $delta . '_' . $name);
}
